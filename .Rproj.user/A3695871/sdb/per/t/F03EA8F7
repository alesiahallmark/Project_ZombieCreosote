{
    "collab_server" : "",
    "contents" : "# This script should be edited constantly to include ONLY the code for making the final figures for the zombie manuscipt\n\n# Load required libraries\nlibrary(ggplot2)\nlibrary(cowplot)\nlibrary(RColorBrewer)\nlibrary(gridExtra)\nlibrary(reshape2)\nlibrary(lubridate)\nlibrary(dplyr)\nlibrary(plyr)\nlibrary(tidyr)\nlibrary(zoo)\nlibrary(scales)\n\n# Read in allregs file, which includes ALL the data\nallregs <- read.csv(\"/Users/alesia/Desktop/zombieallregs_4Sept17.csv\")\nallregs$timestamp <- as.POSIXlt(allregs$timestamp, format=\"%Y-%m-%d %H:%M:%S\")\nallregs$date <- as.Date(allregs$date, format=\"%Y-%m-%d\")\nallregs$hour <- hour(allregs$timestamp)\nallregs <- allregs[allregs$Depth == \"02.5cm\" & !is.na(allregs$Depth),]\nallregs <- allregs[with(allregs, order(timestamp)),]\n\nallregs$BlankColumn <- NA #dummy column for faceting \nallregs$LDStatus <- factor(allregs$LDStatus, levels=c(\"L\",\"D\"))\n  \n# define time boundaries for plots\nonedryweek <- c(as.POSIXlt(\"2015-08-14 12:00:00\"), as.POSIXlt(\"2015-09-30 12:00:00\"))\nonewetweek <- c(as.POSIXlt(\"2015-10-15 12:00:00\"), as.POSIXlt(\"2015-11-15 12:00:00\"))\nwholeseason <- c(as.POSIXlt(\"2015-07-31 12:00:00\"), as.POSIXlt(\"2015-12-04 12:00:00\"))\n\n### Plots\n\n# Branch Position - one dry week, comparing Live and Dead branches\nbranch.dry.plot <- ggplot(unique(allregs[,c(\"timestamp\", \"mean.dif\", \"StemID\", \"mean.dif.all\", \"mean.dif.LD\", \"LDStatus\", \"BlankColumn\")]), aes(x=timestamp, y=mean.dif, group=StemID, colour=LDStatus)) +\n  facet_grid(BlankColumn~.) + ylab(\"Branch Position\") + xlab(\"Time\") +\n  geom_point(size=0.4, alpha=0.1) + \n  geom_line(size=0.4, alpha=0.1) + \n  geom_point(aes(y=mean.dif.LD, colour=LDStatus), shape=1, alpha=0.32, size=0.4) + \n  geom_line(aes(y=mean.dif.LD, colour=LDStatus), alpha=0.6) + \n  guides(colour = guide_legend(title=\"Branch\\nType\", \n                               override.aes = list(size = 1.5))) +\n  scale_color_manual(labels = c(\"Live\", \"Dead\"), values=c(\"#4daf4a\", \"#a65628\")) +\n  theme(axis.title.x=element_blank(), \n        axis.text.x=element_blank(), axis.ticks.x=element_blank(), \n        strip.background = element_blank(), strip.text = element_text(colour=\"white\"),\n        legend.key.size = unit(0.65,\"lines\")) +\n  xlim(onedryweek)  \n\n# Branch Position - one wet week, comparing Live and Dead branches\nbranch.wet.plot <- ggplot(unique(allregs[,c(\"timestamp\", \"mean.dif\", \"StemID\", \"mean.dif.all\", \"mean.dif.LD\", \"LDStatus\", \"BlankColumn\")]), aes(x=timestamp, y=mean.dif, group=StemID, colour=LDStatus)) +\n  facet_grid(BlankColumn~.) + ylab(\"Branch Position\") + xlab(\"Time\") +\n  geom_point(size=0.4, alpha=0.1) + \n  geom_line(size=0.4, alpha=0.1) + \n  geom_point(aes(y=mean.dif.LD, group=LDStatus), shape=1, alpha=0.32, size=0.4) + \n  geom_line(aes(y=mean.dif.LD, group=LDStatus), alpha=0.6) + \n  guides(colour = guide_legend(title=\"Branch\\nType\", \n                               override.aes = list(size = 1.5))) +\n  scale_color_manual(labels = c(\"Live\", \"Dead\"), values=c(\"#4daf4a\", \"#a65628\")) +\n  theme(axis.title.x=element_blank(), \n        axis.text.x=element_blank(), axis.ticks.x=element_blank(), \n        strip.background = element_blank(), strip.text = element_text(colour=\"white\"),\n        legend.key.size = unit(0.65,\"lines\")) +\n  xlim(onewetweek)  \n\n# Branch Position - all season plot, comparing Live and Dead branches\nstems.plot <- ggplot(unique(allregs[,c(\"timestamp\", \"LDStatus\", \"StemID\", \"mean.dif\", \"mean.dif.all\", \"mean.dif.LD\", \"BlankColumn\")]), aes(x=timestamp, y=mean.dif, group=StemID, colour=LDStatus)) +\n  facet_grid(BlankColumn~.) + ylab(\"Branch Position\") + xlab(\"Time\") +\n  geom_point(size=0.4, alpha=0.1) + \n  geom_line(size=0.4, alpha=0.1) + \n  geom_point(aes(y=mean.dif.LD, group=LDStatus), shape=1, alpha=0.32, size=0.4) + \n  geom_line(aes(y=mean.dif.LD, group=LDStatus), alpha=0.6) + \n  guides(colour = guide_legend(title=\"Branch\\nType\", \n                               override.aes = list(size = 1.5))) +\n  scale_color_manual(labels = c(\"Live\", \"Dead\"), values=c(\"#4daf4a\", \"#a65628\")) +\n  theme(axis.title.x=element_blank(), \n        axis.text.x=element_blank(), axis.ticks.x=element_blank(), \n        strip.background = element_blank(), strip.text = element_text(colour=\"white\"),\n        legend.key.size = unit(0.65,\"lines\")) +\n  xlim(wholeseason) \n\n# Function to create plots of abiotic variables\nplot.timeline.func <- function(abio.var, y.label, dot.colour, timeperiod) {\n  ggplot(data = unique(allregs[,c(\"timestamp\", \"BlankColumn\", abio.var)]),\n         aes_string(x = \"timestamp\", y = abio.var)) +\n    facet_grid(BlankColumn~.) +\n    geom_point(aes(colour=timestamp), alpha=0) +\n    geom_line(colour=dot.colour, alpha=0.4, size=0.3) + \n    geom_point(colour=dot.colour, fill = \"white\", shape = 1, alpha=0.5, size=0.7) + \n    theme(axis.title.x=element_blank(), \n          axis.text.x=element_blank(), axis.ticks.x=element_blank(), \n          strip.background = element_blank(), \n          strip.text = element_text(colour=\"white\"),\n          legend.key.size = unit(0, \"lines\"),\n          legend.text = element_text(size=unit(0, \"lines\")),\n          legend.title = element_text(size=unit(0, \"lines\"))) +\n    xlab(\"Time\") + xlim(timeperiod) +\n    ylab(y.label)\n}\n\n# Humidity # formerly colour \"dark blue\"\nhumidity.plot <- plot.timeline.func(\n  abio.var = \"RH\", y.label = \"Relative\\nHumidity (%)\", \n  dot.colour = \"black\", timeperiod = wholeseason)\nhumidity.plot.dry <- plot.timeline.func(\n  abio.var = \"RH\", y.label = \"Relative\\nHumidity (%)\", \n  dot.colour = \"black\", timeperiod = onedryweek)\nhumidity.plot.wet <- plot.timeline.func(\n  abio.var = \"RH\", y.label = \"Relative\\nHumidity (%)\", \n  dot.colour = \"black\", timeperiod = onewetweek)\n# Air temp # formerly colour \"dark red\"\nAirT.plot <- plot.timeline.func(\n  abio.var = \"air.temp\", y.label = expression(\"Air\\nTemperature \" ( degree*C)),\n  dot.colour = \"black\", timeperiod = wholeseason)\nAirT.plot.dry <- plot.timeline.func(\n  abio.var = \"air.temp\", y.label = expression(\"Air\\nTemperature \" ( degree*C)),\n  dot.colour = \"black\", timeperiod = onedryweek)\nAirT.plot.wet <- plot.timeline.func(\n  abio.var = \"air.temp\", y.label = expression(\"Air\\nTemperature \" ( degree*C)),\n  dot.colour = \"black\", timeperiod = onewetweek)\n# VPD # formerly colour purple4\nVPD.plot <- plot.timeline.func(\n  abio.var = \"VPD\", y.label = \"Vapour Pressure\\nDeficit (kPa)\",\n  dot.colour = \"black\", timeperiod = wholeseason)\nVPD.plot.dry <- plot.timeline.func(\n  abio.var = \"VPD\", y.label = \"Vapour Pressure\\nDeficit (kPa)\",\n  dot.colour = \"black\", timeperiod = onedryweek)\nVPD.plot.wet <- plot.timeline.func(\n  abio.var = \"VPD\", y.label = \"Vapour Pressure\\nDeficit (kPa)\",\n  dot.colour = \"black\", timeperiod = onewetweek)\n# Stem Water Potential # formerly colour \"dark green\"\nStemWP.plot <- plot.timeline.func(\n  abio.var = \"StemWPsm\", y.label = \"Stem Water\\nPotential (MPa)\", \n  dot.colour = \"black\", timeperiod = wholeseason)\nStemWP.plot.dry <- plot.timeline.func(\n  abio.var = \"StemWPsm\", y.label = \"Stem Water\\nPotential (MPa)\", \n  dot.colour = \"black\", timeperiod = onedryweek)\nStemWP.plot.wet <- plot.timeline.func(\n  abio.var = \"StemWPsm\", y.label = \"Stem Water\\nPotential (MPa)\", \n  dot.colour = \"black\", timeperiod = onewetweek)\n# PAR # formerly colour \"orange\"\nPAR.plot <- plot.timeline.func(\n  abio.var = \"PAR\", y.label = \"Incoming Light\\n(µE m-2 s-1)\", \n  dot.colour = \"black\", timeperiod = wholeseason)\nPAR.plot.dry <- plot.timeline.func(\n  abio.var = \"PAR\", y.label = \"Incoming Light\\n(µE m-2 s-1)\", \n  dot.colour = \"black\", timeperiod = onedryweek)\nPAR.plot.wet <- plot.timeline.func(\n  abio.var = \"PAR\", y.label = \"Incoming Light\\n(µE m-2 s-1)\", \n  dot.colour = \"black\", timeperiod = onewetweek)\n# Air pressure # formerly colour coral 4\nairP.plot <- plot.timeline.func(\n  abio.var = \"air.press\", y.label = \"Air Pressure\\n(kPa)\", \n  dot.colour = \"black\", timeperiod = wholeseason)\n\n# Difference in soil T\nSoilT.plot <- ggplot(data = unique(allregs[,c(\"timestamp\", \"BlankColumn\", \"SoilT.dif\")]), aes(x = timestamp, y = SoilT.dif, colour=SoilT.dif)) +\n  facet_grid(BlankColumn~.) +\n  geom_line(alpha=1, size=0.3) + \n  geom_point(alpha=1, size=0.8, shape=1) + \n  stat_smooth(method=\"lm\", se=F, colour=\"black\", size=0.7) +\n  scale_colour_gradientn(colours=c('#542788', '#998ec3', '#d8daeb', '#f7f7f7', '#fdb863', '#e66101'), values=rescale(c(-11,-3,-0.5,0,1,7))) +\n  theme(axis.title.x=element_blank(), \n        axis.text.x=element_blank(), axis.ticks.x=element_blank(), \n        strip.background = element_blank(), \n        strip.text = element_text(colour=\"white\"),\n        legend.key.size = unit(0, \"lines\"),\n        legend.text = element_text(size=unit(0, \"lines\")),\n        legend.title = element_text(size=unit(0, \"lines\"))) +\n  xlab(\"Time\") + xlim(wholeseason) +\n  ylab(expression(\"Soil\\nShading\" ( degree*C)))\n\n### Cross-correlations\n\n# Conceptual diagram\nsignal <- seq(-1, 1, length.out=51)[-51]\ncc.concept <- rbind(\n  data.frame(TimePeriod = \"Time Period 1\",\n    Time = 1:300,\n    Signal = sin(pi*rep(signal, length.out=300)),\n    SignalLag = lag(sin(pi*rep(signal, length.out=300)), 5),\n    SignalLead = lead(sin(pi*rep(signal, length.out=300)), 5)), \n  data.frame(TimePeriod = \"Time Period 2\",\n    Time = 1:300,\n    Signal = sin(pi*rep(signal, length.out=300)),\n    SignalLag = lead(sin(pi*rep(seq(-1, 1, length.out=56)[-56], length.out=320)), 10)[1:300],\n    SignalLead = lead(sin(pi*rep(signal, length.out=300)), 5)))\n\n# calculate cross-correlation values\nccr.conceptone <- rbind(\n  cbind(TimePeriod = \"Time Period 1\", cbind(Predictor = \"SignalLead\", melt(cbind(cc.concept$Time[cc.concept$TimePeriod==\"Time Period 1\"], data.frame(rollapply(cc.concept[cc.concept$TimePeriod==\"Time Period 1\",], width=112, function(x) ccf(as.numeric(x[,\"Signal\"]), as.numeric(x[,\"SignalLead\"]), lag.max=4, type=\"correlation\", na.action = na.pass, plot=F)$acf[,,1], by.column=F, partial=T))), id.vars=1))),\n  cbind(TimePeriod = \"Time Period 1\", cbind(Predictor = \"SignalLag\", melt(cbind(cc.concept$Time[cc.concept$TimePeriod==\"Time Period 1\"], data.frame(rollapply(cc.concept[cc.concept$TimePeriod==\"Time Period 1\",], width=112, function(x) ccf(as.numeric(x[,\"Signal\"]), as.numeric(x[,\"SignalLag\"]), lag.max=4, type=\"correlation\", na.action = na.pass, plot=F)$acf[,,1], by.column=F, partial=T))), id.vars=1))))\ncolnames(ccr.conceptone) <- c(\"TimePeriod\", \"Predictor\", \"Time\", \"lag\", \"acf\")\n\nccr.concepttwo <- rbind(\n  cbind(TimePeriod = \"Time Period 2\", cbind(Predictor = \"SignalLead\", melt(cbind(cc.concept$Time[cc.concept$TimePeriod==\"Time Period 2\"], data.frame(rollapply(cc.concept[cc.concept$TimePeriod==\"Time Period 2\",], width=112, function(x) ccf(as.numeric(x[,\"Signal\"]), as.numeric(x[,\"SignalLead\"]), lag.max=4, type=\"correlation\", na.action = na.pass, plot=F)$acf[,,1], by.column=F, partial=T))), id.vars=1))),\n  cbind(TimePeriod = \"Time Period 2\", cbind(Predictor = \"SignalLag\", melt(cbind(cc.concept$Time[cc.concept$TimePeriod==\"Time Period 2\"], data.frame(rollapply(cc.concept[cc.concept$TimePeriod==\"Time Period 2\",], width=112, function(x) ccf(as.numeric(x[,\"Signal\"]), as.numeric(x[,\"SignalLag\"]), lag.max=4, type=\"correlation\", na.action = na.pass, plot=F)$acf[,,1], by.column=F, partial=T))), id.vars=1))))\ncolnames(ccr.concepttwo) <- c(\"TimePeriod\", \"Predictor\", \"Time\", \"lag\", \"acf\")\nccr.concept <- rbind(ccr.conceptone, ccr.concepttwo)\n\n# aggregate by day\nccr.concept$lag <- as.numeric(as.factor(ccr.concept$lag)) - 5\nccr.concept <- ddply(ccr.concept, c(\"TimePeriod\", \"Predictor\", \"Time\"), function(x) data.frame(max.acf = max(x$acf, na.rm=T),\n             lag.max.acf = x$lag[x$acf == max(x$acf, na.rm=T)]))\nccr.concept$Predictor <- revalue(ccr.concept$Predictor, c(\n  \"SignalLead\" = \"dot\",\n  \"SignalLag\" = \"dash\"))\n\n# Plot - theoretical predictor and response variables\ncc.concept$BlankColumn <- NA\nconcept.fig <- ggplot(cc.concept, aes(Time, Signal)) + \n  xlim(40,230) + facet_grid(BlankColumn~TimePeriod) +\n  geom_point(aes(x=240, y=Signal, colour=Time)) + #useless, just need legend\n  geom_line(size=0.7, colour=\"black\") + \n  geom_line(aes(y=SignalLag), colour=\"#d7191c\", size=0.7, linetype=\"longdash\") +\n  geom_line(aes(y=SignalLead), colour=\"#2c7bb6\", size=0.7, linetype=\"dotted\") + \n  theme(axis.title.x = element_blank(),\n        axis.text.x = element_blank(), axis.ticks.x = element_blank(),\n        axis.text.y = element_blank(), axis.ticks.y = element_blank(),\n        strip.background = element_blank(), strip.text = element_text(size=13),\n        plot.margin = unit(c(0, 0, 0, 0), \"cm\"))\n# Plot - Cross-correlation values\nccr.concept.heatmap <- ggplot(ccr.concept, aes(x=Time, y=0.5, fill=lag.max.acf)) + \n  geom_raster(interpolate=T) + \n  geom_line(aes(x=Time, y=max.acf), show.legend = F) + \n  facet_grid(Predictor~TimePeriod) + xlim(40, 230) +\n  scale_fill_gradientn(\n    colours=c(\"#d7191c\", \"#fdae61\", \"#ffffbf\", \"#abd9e9\", \"#2c7bb6\"), \n    labels = c(\"- (lead)\",\" \",\"0\",\" \",\"+ (lag)\")) + \n  scale_y_continuous(breaks=c(0,1), position = \"left\") +\n  ylab(\"Correlation\") + xlab(\"Time\") +\n  guides(fill = guide_legend(title=\"Lag\")) + theme_light() +\n  theme(panel.spacing.y = unit(0.3, \"line\"), \n        axis.title.y = element_text(size=10),\n        axis.text.y = element_text(size=8),\n        axis.text.x = element_blank(), axis.ticks.x = element_blank(),\n        strip.background = element_rect(fill = \"#d9d9d9\"), \n        panel.grid.major = element_blank(),\n        panel.grid.minor = element_blank(),\n        strip.text = element_text(size=10, colour = \"#252525\"), \n        strip.text.x = element_blank(),\n        legend.key.size = unit(0.65,\"lines\"),\n        plot.margin = unit(c(0, 0, 0, 0), \"cm\"))\n# Print concept figures\nboth.concept.plots <- ggdraw() +\n  draw_plot(plot_grid(concept.fig, ccr.concept.heatmap, align=\"v\", ncol=1,\n                      rel_heights = c(0.65, 0.35))) +\n  geom_rect(aes(xmin = 0.73, xmax = 1, ymin = 0.4, ymax = 1),\n            colour = \"white\", fill = \"white\") \nsave_plot(\"/Users/alesia/Desktop/ZombieCCFconcept.png\", both.concept.plots, base_width = 6, base_height = 3)\n\n\n# Find the cross-correlation between live and dead branches\nallregs$mean.dif.LD <- round(allregs$mean.dif.LD, digits = 6)\ncc.LD <- unique(allregs[,c(\"timestamp\", \"date\", \"hour\", \"mean.dif.LD\", \"LDStatus\")])\nunique(cc.LD[c(4226:4229),c(\"timestamp\", \"date\", \"hour\", \"mean.dif.LD\", \"LDStatus\")])\nunique(cc.LD[rownames(cc.LD) %in% 298302:298308,c(\"timestamp\", \"date\", \"hour\", \"mean.dif.LD\", \"LDStatus\")])\ncc.LD <- cc.LD[-(4226:4229),] # weird lines causing errors?\ncc.LD <- spread(cc.LD, LDStatus, mean.dif.LD)\n\nccLD.daily <- cbind(\"LD\", melt(cbind(cc.LD$timestamp, data.frame(rollapply(cc.LD, width=24*5, function(x) ccf(as.numeric(x[,\"L\"]), as.numeric(x[,\"D\"]), lag.max=3, type=\"correlation\", na.action = na.pass, plot=F)$acf[,,1], by.column=F, partial=T))), id.vars=\"cc.LD$timestamp\"))\ncolnames(ccLD.daily) <- c(\"data.comp\", \"timestamp\", \"lag\", \"acf\")\n\n# aggregate by day\nccLD.daily$date <- as.Date(trunc(as.POSIXct(ccLD.daily$timestamp), units=\"days\"))\nccLD.daily$hour <- hour(as.POSIXct(ccLD.daily$timestamp))\nccLD.daily$lag <- as.numeric(as.factor(ccLD.daily$lag)) - 4\n\nccLD.daily <- ddply(ccLD.daily[,c(\"date\", \"hour\", \"data.comp\", \"lag\", \"acf\")], c(\"date\", \"hour\", \"data.comp\"), function(x)\n  data.frame(max.hourly.acf = max(x$acf, na.rm=T),\n             lag.max.acf = x$lag[x$acf == max(x$acf, na.rm=T)]))\nccLD.daily <- ddply(ccLD.daily[,c(\"date\", \"data.comp\", \"max.hourly.acf\", \"lag.max.acf\")], c(\"date\", \"data.comp\"), function(x)\n  data.frame(daily.meanmax.acf = mean(x$max.hourly.acf, na.rm=T),\n             daily.mean.lag = round(mean(x$lag.max.acf, na.rm=T))))\n\nccLD.daily$BlankColumn <- \"L vs. D\"\nccLD.daily$daily.mean.lag <- as.factor(ccLD.daily$daily.mean.lag)\nccLD.daily$daily.mean.lag <- factor(ccLD.daily$daily.mean.lag,\n                                     levels=-3:3)\nccLD.heatmap <- ggplot(ccLD.daily, aes(x=date, y=0.5)) + \n  geom_raster(interpolate=F, aes(fill=daily.mean.lag)) + \n  scale_fill_manual(drop=F,\n    values=c('#d73027','#fc8d59','#fee090','#ffffbf','#e0f3f8','#91bfdb','#4575b4')) +\n  geom_line(aes(y=daily.meanmax.acf)) +\n  geom_hline(yintercept=0.5, alpha=0.3, linetype=2) + \n  scale_y_continuous(breaks=c(0,0.5,1), position = \"left\") +\n  ylab(\"Correlation\") + xlab(\"Time\") +\n  guides(fill = guide_legend(title=\"Lag\")) + theme_light() +\n  facet_grid(BlankColumn~.) + \n  theme(panel.spacing.y = unit(0.3, \"line\"), \n        axis.title.y = element_text(size=12), axis.text.y = element_text(size=8),\n        axis.text.x = element_text(size=12), \n        strip.background = element_rect(fill = \"#d9d9d9\"), \n        panel.grid.major = element_blank(), panel.grid.minor = element_blank(),\n        strip.text = element_text(size=10, colour = \"#252525\"), \n        strip.text.x = element_blank(),\n        legend.key.size = unit(0.65,\"lines\"),\n        plot.margin = unit(c(0, 0, 0, 0), \"cm\"))\n\nboth.BranchPosition.plots <- ggdraw() +\n  draw_plot(plot_grid(stems.plot, ccLD.heatmap, align=\"v\", ncol=1,\n                      rel_heights = c(0.7, 0.3))) \nsave_plot(\"/Users/alesia/Desktop/ZombieBranchPlots.png\", both.BranchPosition.plots, base_width = 7, base_height = 3)\n\n\n\n\n# Function to calculate cross-correlations with abiotic factors\ncc.func <- function(abio.var, LagMax, Width) {\n  # Make subset of Live or Dead branch data\n  for (LD in c(\"L\", \"D\")) {\n    LD.data <- unique(allregs[allregs$LDStatus==LD, c(\"timestamp\", \"mean.dif.LD\", \"LDStatus\", \"PAR\", \"RH\", \"air.temp\", \"VPD\", \"StemWPsm\", \"FC\", \"GPP\", \"RE\", \"LE\", \"SoilT.dif\")])\n    # Order data by timestamp\n    LD.data <- LD.data[with(LD.data, order(timestamp)),]\n    # Create data.frame with ccf\n    for (var in 1:length(unique(abio.var))) {\n      ccr.output <- cbind(unique(abio.var)[var], unique(LD.data$LDStatus), LD.data[,unique(abio.var)[var]], melt(cbind(LD.data$timestamp, data.frame(rollapply(LD.data, width=Width, function(x) ccf(as.numeric(x[,\"mean.dif.LD\"]), as.numeric(x[,unique(abio.var)[var]]), lag.max=LagMax, type=\"correlation\", na.action = na.pass, plot=F)$acf[,,1], by.column=F, partial=T))), id.vars=\"LD.data$timestamp\"))\n      colnames(ccr.output) <- c(\"data.comp\", \"LDStatus\", \"raw.values\", \"timestamp\", \"lag\", \"acf\")\n      if (var == 1 & LD == \"L\") { all.ccr.output <- ccr.output }\n      if (var > 1 | LD == \"D\") { all.ccr.output <- rbind(all.ccr.output, ccr.output) \n      }}}\n    all.ccr.output$lag <- as.numeric(as.factor(all.ccr.output$lag)) - (LagMax + 1)\n    all.ccr.output$date <- as.Date(trunc(as.POSIXct(all.ccr.output$timestamp), units=\"days\"))\n    all.ccr.output$hour <- hour(as.POSIXct(all.ccr.output$timestamp))\n    return(all.ccr.output)\n    }\n\ncc.daily <- cc.func(abio.var = c(\"PAR\", \"VPD\", \"RH\", \"air.temp\", \"StemWPsm\"), Width = 24*5, LagMax = 3)\n# Add on soil calcs, allow for a little more lag\ncc.SOIL <- cc.func(abio.var = c(\"SoilT.dif\"), Width = 24*5, LagMax = 4)\ncc.daily <- rbind(cc.daily, cc.SOIL)\n\ncc.hourly.max <- ddply(\n  cc.daily[,c(\"date\", \"hour\", \"data.comp\", \"raw.values\", \"LDStatus\", \"lag\", \"acf\")], \n  c(\"date\", \"hour\", \"data.comp\", \"LDStatus\"), function(x)\n  data.frame(raw.values = mean(unique(x$raw.values), na.rm=T), \n             max.hourly.acf = max(abs(x$acf), na.rm=T),\n             lag.max.acf = x$lag[abs(x$acf) == max(abs(x$acf), na.rm=T)]))\ncc.daily.max <- ddply(cc.hourly.max, \n  c(\"date\", \"data.comp\", \"LDStatus\"), function(x)\n  data.frame(daily.meanmax.acf = mean(x$max.hourly.acf, na.rm=T),\n             daily.mean.lag = mean(x$lag.max.acf, na.rm=T),\n             daily.mean.rawvalue = mean(x$raw.values, na.rm=T)))\n\n# Function to create heatmap plots, splitting Live and Dead correlations\nheatmap.plot.function <- function(abio.var, timeperiod, plot.order=\"not.last\") {\n  data.to.plot <- cc.daily.max[cc.daily.max$data.comp == abio.var,]\n  if (abio.var %in% c(\"PAR\", \"VPD\", \"RH\", \"air.temp\", \"StemWPsm\")) {\n    data.for.legend <- cc.daily.max[cc.daily.max$data.comp %in% c(\"PAR\", \"VPD\", \"RH\", \"air.temp\", \"StemWPsm\"),] }\n  if (abio.var %in% c(\"SoilT.dif\")) {\n    data.for.legend <- cc.daily.max[cc.daily.max$data.comp == abio.var,] }\n  plot <- ggplot(data.to.plot[!is.na(data.to.plot$LDStatus),], aes(x=date, y=0.5, fill=daily.mean.lag)) +\n    geom_raster(data=data.for.legend, alpha=0) + # fake, for legend\n    geom_raster(interpolate=T) + \n    scale_fill_gradientn(colours=c('#d73027','#fc8d59','#fee090','#ffffbf','#e0f3f8','#91bfdb','#4575b4')) +\n    geom_hline(yintercept=0.5, alpha=0.3, linetype=2) + \n    geom_line(aes(y=abs(daily.meanmax.acf), alpha=abs(daily.meanmax.acf)), show.legend = F) + scale_alpha(range=c(0,1)) +\n    facet_grid(LDStatus~., drop=T) +\n    scale_y_continuous(breaks=c(0,1), position = \"left\") + \n    ylab(expression(R^2)) + \n    xlab(\"Time\") + xlim(as.Date(timeperiod)) +\n    guides(fill = guide_legend(title=\"Lag\")) +\n    theme_light() + \n    theme(panel.spacing.y = unit(0.3, \"line\"), \n          axis.title.y = element_text(size=12), axis.text.y = element_text(size=8),\n          strip.background = element_rect(fill = \"#d9d9d9\"), \n          panel.grid.major = element_blank(), panel.grid.minor = element_blank(),\n          strip.text = element_text(size=10, colour = \"#252525\"), \n          strip.text.x = element_blank(),\n          legend.key.size = unit(0.65,\"lines\"),\n          plot.margin = unit(c(0, 0, 0, 0), \"cm\"))\n  if(plot.order == \"last\") {\n    plot <- plot + theme(axis.text.x = element_text(size=12))\n  } else {\n    plot <- plot + theme(axis.text.x = element_blank(),\n                         axis.ticks.x = element_blank(),\n                         axis.title.x = element_blank())\n  }\n  plot\n}\n\n# Cross-correlation - humidity\nhumidity.cc.plot <- heatmap.plot.function(abio.var = \"RH\", timeperiod = wholeseason)\nhumidity.cc.plot.wet <- heatmap.plot.function(abio.var = \"RH\", timeperiod = onewetweek)\nhumidity.cc.plot.dry <- heatmap.plot.function(abio.var = \"RH\", timeperiod = onedryweek)\n\n# Cross-correlation - air temperature\nAirT.cc.plot <- heatmap.plot.function(abio.var = \"air.temp\", timeperiod = wholeseason)\nAirT.cc.plot.wet <- heatmap.plot.function(abio.var = \"air.temp\", timeperiod = onewetweek)\nAirT.cc.plot.dry <- heatmap.plot.function(abio.var = \"air.temp\", timeperiod = onedryweek)\n\n# Cross-correlation - VPD\nVPD.cc.plot <- heatmap.plot.function(abio.var = \"VPD\", timeperiod = wholeseason)\nVPD.cc.plot.wet <- heatmap.plot.function(abio.var = \"VPD\", timeperiod = onewetweek)\nVPD.cc.plot.dry <- heatmap.plot.function(abio.var = \"VPD\", timeperiod = onedryweek)\n\n# Cross-correlation - PAR\nPAR.cc.plot <- heatmap.plot.function(abio.var = \"PAR\", timeperiod = wholeseason)\nPAR.cc.plot.wet <- heatmap.plot.function(abio.var = \"PAR\", timeperiod = onewetweek)\nPAR.cc.plot.dry <- heatmap.plot.function(abio.var = \"PAR\", timeperiod = onedryweek)\n\n# Cross-correlation - stem water potential\nStemWP.cc.plot <- heatmap.plot.function(abio.var = \"StemWPsm\", timeperiod = wholeseason, plot.order = \"last\")\nStemWP.cc.plot.wet <- heatmap.plot.function(abio.var = \"StemWPsm\", timeperiod = onewetweek, plot.order = \"last\")\nStemWP.cc.plot.dry <- heatmap.plot.function(abio.var = \"StemWPsm\", timeperiod = onedryweek, plot.order = \"last\")\n\n\n# Cross-correlation - difference in Soil Temperature\nSoilT.cc.plot <- heatmap.plot.function(abio.var = \"SoilT.dif\", timeperiod = wholeseason, plot.order = \"last\")\nSoilT.cc.plot.wet <- heatmap.plot.function(abio.var = \"SoilT.dif\", timeperiod = onewetweek, plot.order = \"last\")\nSoilT.cc.plot.dry <- heatmap.plot.function(abio.var = \"SoilT.dif\", timeperiod = onedryweek, plot.order = \"last\")\n\n\n# Print a big panel of all seasonal plots\nall.seasonal.plots <- ggdraw() +\n  draw_plot(plot_grid(humidity.plot, humidity.cc.plot, \n                      AirT.plot, AirT.cc.plot,\n                      VPD.plot, VPD.cc.plot,\n                      StemWP.plot, StemWP.cc.plot,\n                      align=\"v\", ncol=1,\n                      rel_heights = c(7,3,7,3,7,3,7,4)))\nsave_plot(\"/Users/alesia/Desktop/ZombieAbioSeasonPlots.png\", all.seasonal.plots, base_width = 6.5, base_height = 9)\n\n# Print soil shading plots\nall.seasonal.plots <- ggdraw() +\n  draw_plot(plot_grid(SoilT.plot, SoilT.cc.plot, \n                      align=\"v\", ncol=1,\n                      rel_heights = c(7,3.5)))\nsave_plot(\"/Users/alesia/Desktop/ZombieSoilShadePlots.png\", all.seasonal.plots, base_width = 6.5, base_height = 3)\n\n\n\n\n\n\n\n\n\n\n\n### Correlation plots\n# Correlation tests\nraw.corr <- data.frame(\n  RHest = cor.test(allregs$RH, allregs$mean.dif.all)$estimate,\n  AirTest = cor.test(allregs$air.temp, allregs$mean.dif.all)$estimate,\n  PARest = cor.test(allregs$PAR, allregs$mean.dif.all)$estimate,\n  StemWPest = cor.test(allregs$StemWPsm, allregs$mean.dif.all)$estimate,\n  VPDest = cor.test(allregs$VPD, allregs$mean.dif.all)$estimate,\n  RHpval = cor.test(allregs$RH, allregs$mean.dif.all)$p.value,\n  AirTpval = cor.test(allregs$air.temp, allregs$mean.dif.all)$p.value,\n  PARpval = cor.test(allregs$PAR, allregs$mean.dif.all)$p.value,\n  StemWPpval = cor.test(allregs$StemWPsm, allregs$mean.dif.all)$p.value,\n  VPDpval = cor.test(allregs$VPD, allregs$mean.dif.all)$p.value)\n\nraw.corr$RHest <- paste(\"R^2 == \", round(raw.corr$RHest, digits=2))\nraw.corr$AirTest <- paste(\"R^2 == \", round(raw.corr$AirTest, digits=2))\nraw.corr$PARest <- paste(\"R^2 == \", round(raw.corr$PARest, digits=2))\nraw.corr$StemWPest <- paste(\"R^2 == \", round(raw.corr$StemWPest, digits=2))\nraw.corr$VPDest <- paste(\"R^2 == \", round(raw.corr$VPDest, digits=2))\nraw.corr$ypos <- .9*max(allregs$mean.dif.all, na.rm=T)\n\n\n\nc(cor.test(allregs$StemWPsm[month(allregs$timestamp)<=9], allregs$mean.dif.all[month(allregs$timestamp)<=9])$estimate, cor.test(allregs$StemWPsm[month(allregs$timestamp)<=9], allregs$mean.dif.all[month(allregs$timestamp)<=9])$p.value)\n\nc(cor.test(allregs$StemWPsm[allregs$LDStatus==\"D\" & month(allregs$timestamp)<=9], allregs$mean.dif.LD[allregs$LDStatus==\"D\" & month(allregs$timestamp)<=9])$estimate, cor.test(allregs$StemWPsm[allregs$LDStatus==\"D\" & month(allregs$timestamp)<=9], allregs$mean.dif.LD[allregs$LDStatus==\"D\" & month(allregs$timestamp)<=9])$p.value)\n\n\n\nWigRH.cor.plot <- ggplot(unique(allregs[,c(\"timestamp\", \"RH\", \"mean.dif.all\")]), aes(x=RH, y=mean.dif.all)) + theme_bw(base_size=20) + \n  theme(legend.position=\"none\",\n        axis.title.x=element_blank(),\n        axis.text.x=element_blank(),\n        axis.ticks.x=element_blank()) +\n  geom_point(aes(alpha=0.3), colour=\"dark blue\") + stat_smooth(method=\"lm\") + \n  geom_text(data=raw.corr, aes(x=25, y=ypos, label=RHest), size=7, vjust=1, parse=T, show.legend=F) +\n  ylab(\"Branch Position\")\n\nWigAirT.cor.plot <- ggplot(unique(allregs[,c(\"timestamp\", \"air.temp\", \"mean.dif.all\")]), aes(x=air.temp, y=mean.dif.all)) + theme_bw(base_size=20) + \n  theme(legend.position=\"none\",\n        axis.title.x=element_blank(), axis.title.y=element_blank(),\n        axis.text.x=element_blank(), axis.text.y=element_blank(),\n        axis.ticks.x=element_blank(), axis.ticks.y=element_blank()) +\n  geom_point(aes(alpha=0.3), colour=\"dark red\") + stat_smooth(method=\"lm\") + \n  geom_text(data=raw.corr, aes(x=25, y=0.6, label=AirTest), size=7, vjust=1, parse=T, show.legend=F) + \n  ylab(\"Branch Position\")\n\nWigVPD.cor.plot <- ggplot(unique(allregs[,c(\"timestamp\", \"VPD\", \"mean.dif.all\")]), aes(x=VPD, y=mean.dif.all)) + theme_bw(base_size=20) + \n  theme(legend.position=\"none\",\n        axis.title.x=element_blank(), axis.title.y=element_blank(),\n        axis.text.x=element_blank(), axis.text.y=element_blank(),\n        axis.ticks.x=element_blank(), axis.ticks.y=element_blank()) +\n  geom_point(aes(alpha=0.3), colour=\"purple\") + stat_smooth(method=\"lm\") + \n  geom_text(data=raw.corr, aes(x=4, y=ypos, label=VPDest), size=7, vjust=1, parse=T, show.legend=F) + \n  ylab(\"Branch Position\")\n\nWigStemWP.cor.plot <- ggplot(unique(allregs[,c(\"timestamp\", \"StemWPsm\", \"mean.dif.all\")]), aes(x=StemWPsm, y=mean.dif.all)) + theme_bw(base_size=20) + \n  theme(legend.position=\"none\",\n        axis.title.x=element_blank(), axis.title.y=element_blank(),\n        axis.text.x=element_blank(), axis.text.y=element_blank(),\n        axis.ticks.x=element_blank(), axis.ticks.y=element_blank()) +\n  geom_point(alpha=0.3, colour=\"dark green\") + \n  stat_smooth(method=\"lm\") + \n  geom_text(data=raw.corr, aes(x=-7.2, y=ypos, label=StemWPest), size=7, vjust=1, parse=T, show.legend=F) +\n  ylab(\"Branch Position\")\n\n\n\n\n\n\n\n\n# LDStatus plots\n########## MORE WORK HERE\nallregs$Season <- NA\nallregs$Season[month(allregs$timestamp) <= 9] <- \"Monsoon\"\nallregs$Season[month(allregs$timestamp) >= 11] <- \"Winter\"\nallregs$Season <- as.factor(allregs$Season)\n\nraw.corr.LD <- data.frame(\n  LDStatus = c(\"D\", \"L\"),\n  RHest = c(cor.test(allregs$RH[allregs$LDStatus==\"D\"], allregs$mean.dif.LD[allregs$LDStatus==\"D\"])$estimate,\n            cor.test(allregs$RH[allregs$LDStatus==\"L\"], allregs$mean.dif.LD[allregs$LDStatus==\"L\"])$estimate),\n  AirTest = c(cor.test(allregs$air.temp[allregs$LDStatus==\"D\"], allregs$mean.dif.LD[allregs$LDStatus==\"D\"])$estimate,\n              cor.test(allregs$air.temp[allregs$LDStatus==\"L\"], allregs$mean.dif.LD[allregs$LDStatus==\"L\"])$estimate),\n  StemWPest = c(cor.test(allregs$StemWPsm[allregs$LDStatus==\"D\"], allregs$mean.dif.LD[allregs$LDStatus==\"D\"])$estimate,\n                cor.test(allregs$StemWPsm[allregs$LDStatus==\"L\"], allregs$mean.dif.LD[allregs$LDStatus==\"L\"])$estimate),\n  StemWPmonsest = c(cor.test(allregs$StemWPsm[allregs$LDStatus==\"D\" & allregs$Season==\"Monsoon\"], allregs$mean.dif.LD[allregs$LDStatus==\"D\" & allregs$Season==\"Monsoon\"])$estimate,\n                cor.test(allregs$StemWPsm[allregs$LDStatus==\"L\" & allregs$Season==\"Monsoon\"], allregs$mean.dif.LD[allregs$LDStatus==\"L\" & allregs$Season==\"Monsoon\"])$estimate),\n  VPDest = c(cor.test(allregs$VPD[allregs$LDStatus==\"D\"], allregs$mean.dif.LD[allregs$LDStatus==\"D\"])$estimate,\n                cor.test(allregs$VPD[allregs$LDStatus==\"L\"], allregs$mean.dif.LD[allregs$LDStatus==\"L\"])$estimate),\n  Shadeest = c(cor.test(allregs$SoilT.dif[allregs$LDStatus==\"D\" & allregs$Depth==\"02.5cm\" & month(allregs$timestamp) <= 9], allregs$mean.dif.LD[allregs$LDStatus==\"D\" & allregs$Depth==\"02.5cm\" & month(allregs$timestamp) <= 9])$estimate,\n               cor.test(allregs$SoilT.dif[allregs$LDStatus==\"L\" & allregs$Depth==\"02.5cm\" & month(allregs$timestamp) <= 9], allregs$mean.dif.LD[allregs$LDStatus==\"L\" & allregs$Depth==\"02.5cm\" & month(allregs$timestamp) <= 9])$estimate))\n\n\nVPDest = c(cor.test(allregs$VPD[allregs$LDStatus==\"D\"], allregs$mean.dif.LD[allregs$LDStatus==\"D\"])$estimate,\n           cor.test(allregs$VPD[allregs$LDStatus==\"L\"], allregs$mean.dif.LD[allregs$LDStatus==\"L\"])$estimate),\nfitD <- lm(mean.dif.LD ~ poly(RH,2), data=allregs[allregs$LDStatus==\"D\",])\nfitL <- lm(mean.dif.LD ~ poly(RH,2), data=allregs[allregs$LDStatus==\"L\",])\ncor(allregs$mean.dif.all, allregs$RH)\nsummary(fitD)\nsummary(fitL)\nfitD\n\nraw.corr.LD$RHest <- paste(\"R^2 == \", round(raw.corr.LD$RHest, digits=2))\nraw.corr.LD$AirTest <- paste(\"R^2 == \", round(raw.corr.LD$AirTest, digits=2))\nraw.corr.LD$StemWPest <- paste(\"R^2 == \", round(raw.corr.LD$StemWPest, digits=2))\nraw.corr.LD$Shadeest <- paste(\"R^2 == \", round(raw.corr.LD$Shadeest, digits=2))\nraw.corr.LD$VPDest <- paste(\"R^2 == \", round(raw.corr.LD$VPDest, digits=2))\nraw.corr.LD$ypos <- c(0.95, 0.8)\n\n\n\nWigRHLD.cor.plot <- ggplot(unique(allregs[,c(\"timestamp\", \"RH\", \"mean.dif.LD\", \"LDStatus\")]), aes(x=RH, y=mean.dif.LD, group=LDStatus, colour=LDStatus)) + theme_bw(base_size=24) + \n  geom_point(alpha=0.4) + \n  stat_smooth(method=\"lm\", formula=y~poly(x,2), size=1.3, se=F) + \n  xlab(\"Relative Humidity (%)\") + ylab(\"Branch Position\") + \n  geom_text(data=raw.corr.LD, aes(x=25, y=ypos, label=RHest), size=7, vjust=1, parse=T, show.legend=F) +\n  labs(colour='Live/Dead') + scale_color_manual(labels = c(\"Dead\", \"Live\"), values=c(\"#a65628\", \"#4daf4a\")) +\n  theme(legend.key.size = unit(.9, units=\"lines\"),\n        legend.position = c(0.8,0.15))\n\n\nAirTLD.cor.plot <- ggplot(unique(allregs[,c(\"timestamp\", \"air.temp\", \"mean.dif.LD\", \"LDStatus\")]), aes(x=air.temp, y=mean.dif.LD, group=LDStatus, colour=LDStatus)) + theme_bw(base_size=24) + \n  geom_point(alpha=0.4) + \n  stat_smooth(method=\"lm\", formula=y~poly(x,2), size=1.3, se=F) + \n  xlab(expression(\"Air Temperature \" ( degree*C))) + ylab(\"Branch Position\") + \n  geom_text(data=raw.corr.LD, aes(x=28, y=ypos, label=AirTest), size=7, vjust=1, parse=T, show.legend=F) +\n  labs(colour='Live/Dead') + scale_color_manual(labels = c(\"Dead\", \"Live\"), values=c(\"#a65628\", \"#4daf4a\")) +\n  theme(legend.position = \"none\", axis.title.y=element_blank())\n\nWigVPDLD.cor.plot <- ggplot(unique(allregs[,c(\"timestamp\", \"VPD\", \"mean.dif.LD\", \"LDStatus\")]), aes(x=VPD, y=mean.dif.LD, group=LDStatus, colour=LDStatus)) + theme_bw(base_size=24) + \n  geom_point(alpha=0.4) + \n  stat_smooth(method=\"lm\", formula=y~poly(x,2), size=1.3, se=F) + \n  xlab(\"Vapour Pressure Deficit (kPa)\") + ylab(\"Branch Position\") + \n  geom_text(data=raw.corr.LD, aes(x=4, y=ypos, label=VPDest), size=7, vjust=1, parse=T, show.legend=F) +\n  labs(colour='Live/Dead') + scale_color_manual(labels = c(\"Dead\", \"Live\"), values=c(\"#a65628\", \"#4daf4a\")) +\n  theme(legend.position = \"none\", \n        axis.title.y=element_blank())\n\n\nWigStemWPLD.cor.plot <- ggplot(unique(allregs[,c(\"timestamp\", \"Season\", \"StemWPsm\", \"LDStatus\", \"mean.dif.LD\")]), aes(x=StemWPsm, y=mean.dif.LD, group=LDStatus, colour=LDStatus)) + theme_bw(base_size=24) + \n  geom_point(alpha=0.4) + \n#  geom_point(data=allregs[allregs$Season==\"Monsoon\",], alpha=0.4) + \n  stat_smooth(method=\"lm\", size=1.3, se=F) + \n  xlab(\"Stem Water Potential (MPa)\") + ylab(\"Branch Position\") +\n  geom_text(data=raw.corr.LD, aes(x=-7, y=ypos, label=StemWPest), size=7, vjust=1, parse=T, show.legend=F) +\n  labs(colour='Live/Dead') + scale_color_manual(labels = c(\"Dead\", \"Live\"), values=c(\"#a65628\", \"#4daf4a\")) +\n  theme(legend.position = \"none\", \n        axis.title.y=element_blank())\n\n\n\n\n# Print all correlation plots\n\n#cor.plots.toprow <- plot_grid(WigRH.cor.plot, WigAirT.cor.plot, WigVPD.cor.plot, WigStemWP.cor.plot, align='h',ncol=4, rel_widths = c(1.2,1,1,1))\ncor.plots.bottomrow <- plot_grid(WigRHLD.cor.plot, AirTLD.cor.plot, WigVPDLD.cor.plot, WigStemWPLD.cor.plot, align='h', ncol=4, rel_widths = c(1.05,1,1,1))\n#cor.plots <- plot_grid(cor.plots.toprow, cor.plots.bottomrow, align='v', nrow=2, rel_heights = c(1,1.3))\n\nsave_plot(\"/Users/alesia/Desktop/ZombiePlots/LDcorrplots.png\", cor.plots.bottomrow, base_width = 27, base_height = 5.75)\n\n\n\n\n\n\n\n\n\n\n# Branch shading\nSoilTdif.plot <- ggplot(SoilTsub[SoilTsub$Depth==\"02.5cm\",], aes(x=timestamp, y=SoilT.dif, group=Depth, colour=SoilT.dif)) + \n  geom_point(alpha=0.3, shape=1) +  \n  geom_hline(aes(yintercept=0)) +\n  stat_smooth(method=\"lm\") +\n  theme_bw(base_size=20) + \n  theme(legend.position=\"none\") +\n  scale_colour_gradient(limits=c(-11,11),high=\"red\",low=\"blue\") +\n  xlab(\"Time\") + ylab(expression(\"Soil Shading \" ( degree*C))) +\n  xlim(start.date, end.date)\nprint(SoilTdif.plot)\nggsave(file=\"/Users/alesia/Desktop/ZombiePlots/SoilTdif_plot.png\", width=4, height=4, units=\"in\", dpi=300)\n\nShadeLD.plot <- ggplot(unique(allregs[allregs$Depth==\"02.5cm\",c(\"timestamp\", \"SoilT.dif\", \"LDStatus\", \"mean.dif.LD\", \"Season\")]), aes(x=SoilT.dif, y=mean.dif.LD, group=LDStatus, colour=LDStatus)) + theme_bw(base_size=20) +\n  geom_point(alpha=0.3) + \n  stat_smooth(method=\"lm\") +\n  geom_text(data=raw.corr.LD, aes(x=-7, y=ypos, label=Shadeest), size=6, vjust=1, parse=T, show.legend=F) +\n  xlab(expression(\"Soil Shading \" ( degree*C))) + ylab(\"Branch Position\") +\n  labs(colour='Live/Dead') + scale_color_manual(labels = c(\"Dead\", \"Live\"), values=c(\"#a65628\", \"#4daf4a\")) +\n  theme(legend.key.size = unit(.8, units=\"lines\"),\n        legend.position = c(0.8,0.15))\n\nprint(ShadeLD.plot)\nggsave(file=\"/Users/alesia/Desktop/ZombiePlots/ShadeWiggleLD_plot.png\", width=4, height=4, units=\"in\", dpi=300)\n\n\n\n\n",
    "created" : 1508725635076.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "4093134869",
    "id" : "F03EA8F7",
    "lastKnownWriteTime" : 1509401862,
    "last_content_update" : 1509401862219,
    "path" : "~/Documents/Code/Project_ZombieCreosote/AJ_zombies_FinalFigsOct2017.R",
    "project_path" : "AJ_zombies_FinalFigsOct2017.R",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}